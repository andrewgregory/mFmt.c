=head1 NAME

mFmt.c - python/rust style string formatting for C

=head1 SYNOPSIS

=head1 DESCRIPTION

=head2 Format String Syntax

 format_string   = ( text | replacement ) *
 replacement     = '{' [argument] [ ':' format_spec ] '}'
 argument        = [^{}:]
 format_spec     = [[fill]align][sign][#][0][width][grouping_option][.precision][type]
 fill            = character
 align           = "<" | ">" | "=" | "^"
 sign            = "+" | "-" | " "
 width           = count
 grouping_option = "_" | ","
 precision       = count
 count           = integer
 type            = [a-zA-Z]

=head1 COMPATIBILITY

=head2 Fill/Align/0

Python and Rust handle padding for numbers differently.  Python provides an
additional alignment modifier to place the fill character between the sign and
number and treats C<0> as a default fill/alignment that can be overridden.
Rust treats C<0> as overriding an explicit fill/alignment and always attaches
0-padding to the number.  mFmt.c follows Rust's interpretation of 0, but adds
Python's internal padding alignment.

 +------------+------------+------------+------------+
 |   Format   |   mFmt.c   |   Python   |    Rust    |
 +------------+------------+------------+------------+
 |       :+05 |      +0042 |      +0042 |      +0042 |
 +------------+------------+------------+------------+
 |      :_>+5 |      __+42 |      __+42 |      __+42 |
 +------------+------------+------------+------------+
 |      :0>+5 |      00+42 |      00+42 |      00+42 |
 +------------+------------+------------+------------+
 |      :_<+5 |      +42__ |      +42__ |      +42__ |
 +------------+------------+------------+------------+
 |     :_>+05 |      +0042 |      __+42 |      +0042 |*
 +------------+------------+------------+------------+
 |     :_<+05 |      +0042 |      +42__ |      +0042 |*
 +------------+------------+------------+------------+
 |      :<+05 |      +0042 |      +4200 |      +0042 |*
 +------------+------------+------------+------------+
 |      :>+05 |      +0042 |      00+42 |      +0042 |*
 +------------+------------+------------+------------+
 |       :=+5 |      +  42 |      +  42 |  <invalid> |*
 +------------+------------+------------+------------+
 |      :_=+5 |      +__42 |      +__42 |  <invalid> |*
 +------------+------------+------------+------------+
 |      :=+05 |      +0042 |      +0042 |  <invalid> |*
 +------------+------------+------------+------------+

=head2 Precision

Rust allows specifying precision as C<N$> or C<*> to take the precision from
one of the formatting arguments.  mFmt.c currently only supports explicit
precision counts.

=head1 SEE ALSO

https://doc.rust-lang.org/std/fmt/

https://docs.python.org/3.8/library/string.html#format-string-syntax

https://slbkbs.org/tmp/fmt/fmt.h
