=head1 NAME

mFmt.c - python/rust style string formatting for C

=head1 SYNOPSIS

 

=head1 DESCRIPTION

In order to work around C's limitations, B<mFmt.c> provides multiple interfaces
ranging in flexibility and ease-of-use.


=head2 Format String Syntax

format_string   = ( text | replacement ) *
replacement     = '{' [argument] [ ':' format_spec ] '}'
argument        = [^{}:]

format_spec     = [[fill]align][sign][#][0][width][grouping_option][.precision][type]
fill            = character
align           = "<" | ">" | "=" | "^"
sign            = "+" | "-" | " "
width           = count
grouping_option = "_" | ","
precision       = count
count           = integer
type            = [a-zA-Z]


"{depends[{name:15} | {version:10} | {desc:50}\n]}"

=head1 COMPATIBILITY

=head2 Padding

Python and Rust handle padding for numbers differently.  Python allows
greater control over where padding is placed, treating C<< < >> and C<< > >>
differently and adding an additional alignment C<=>.

Python

    >>> "{:=+5}".format(42)  ->  '+  42'
    >>> "{:+5}".format(42)   ->  '  +42'
    >>> "{:+05}".format(42)  ->  '+0042'
    >>> "{:<+05}".format(42) ->  '+4200'
    >>> "{:>+05}".format(42) ->  '00+42'

Rust

=head1 SEE ALSO

https://doc.rust-lang.org/std/fmt/

https://docs.python.org/3.8/library/string.html#format-string-syntax

https://slbkbs.org/tmp/fmt/fmt.h
